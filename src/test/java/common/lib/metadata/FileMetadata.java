package common.lib.metadata;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-23")
public class FileMetadata implements org.apache.thrift.TBase<FileMetadata, FileMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<FileMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileMetadata");

  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RECORD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("record_count", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("file_size_in_bytes", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_SIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_sizes", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("value_counts", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField NULL_VALUE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("null_value_counts", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField NAN_VALUE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("nan_value_counts", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField LOWER_BOUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lower_bounds", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField UPPER_BOUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("upper_bounds", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField KEY_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("key_metadata", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SPLIT_OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("split_offsets", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SORT_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_order_id", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileMetadataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileMetadataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable
  FormatType file_format; // required
  public long record_count; // optional
  public long file_size_in_bytes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<Integer, Long> column_sizes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<Integer, Long> value_counts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<Integer, Long> null_value_counts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<Integer, Long> nan_value_counts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<Integer,java.nio.ByteBuffer> lower_bounds; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<Integer,java.nio.ByteBuffer> upper_bounds; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer key_metadata; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Long> split_offsets; // optional
  public int sort_order_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_FORMAT((short)1, "file_format"),
    RECORD_COUNT((short)2, "record_count"),
    FILE_SIZE_IN_BYTES((short)3, "file_size_in_bytes"),
    COLUMN_SIZES((short)4, "column_sizes"),
    VALUE_COUNTS((short)5, "value_counts"),
    NULL_VALUE_COUNTS((short)6, "null_value_counts"),
    NAN_VALUE_COUNTS((short)7, "nan_value_counts"),
    LOWER_BOUNDS((short)8, "lower_bounds"),
    UPPER_BOUNDS((short)9, "upper_bounds"),
    KEY_METADATA((short)10, "key_metadata"),
    SPLIT_OFFSETS((short)11, "split_offsets"),
    SORT_ORDER_ID((short)12, "sort_order_id");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_FORMAT
          return FILE_FORMAT;
        case 2: // RECORD_COUNT
          return RECORD_COUNT;
        case 3: // FILE_SIZE_IN_BYTES
          return FILE_SIZE_IN_BYTES;
        case 4: // COLUMN_SIZES
          return COLUMN_SIZES;
        case 5: // VALUE_COUNTS
          return VALUE_COUNTS;
        case 6: // NULL_VALUE_COUNTS
          return NULL_VALUE_COUNTS;
        case 7: // NAN_VALUE_COUNTS
          return NAN_VALUE_COUNTS;
        case 8: // LOWER_BOUNDS
          return LOWER_BOUNDS;
        case 9: // UPPER_BOUNDS
          return UPPER_BOUNDS;
        case 10: // KEY_METADATA
          return KEY_METADATA;
        case 11: // SPLIT_OFFSETS
          return SPLIT_OFFSETS;
        case 12: // SORT_ORDER_ID
          return SORT_ORDER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECORD_COUNT_ISSET_ID = 0;
  private static final int __FILE_SIZE_IN_BYTES_ISSET_ID = 1;
  private static final int __SORT_ORDER_ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RECORD_COUNT,_Fields.FILE_SIZE_IN_BYTES,_Fields.COLUMN_SIZES,_Fields.VALUE_COUNTS,_Fields.NULL_VALUE_COUNTS,_Fields.NAN_VALUE_COUNTS,_Fields.LOWER_BOUNDS,_Fields.UPPER_BOUNDS,_Fields.KEY_METADATA,_Fields.SPLIT_OFFSETS,_Fields.SORT_ORDER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "FormatType")));
    tmpMap.put(_Fields.RECORD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("record_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("file_size_in_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLUMN_SIZES, new org.apache.thrift.meta_data.FieldMetaData("column_sizes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.VALUE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("value_counts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.NULL_VALUE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("null_value_counts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.NAN_VALUE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("nan_value_counts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LOWER_BOUNDS, new org.apache.thrift.meta_data.FieldMetaData("lower_bounds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.UPPER_BOUNDS, new org.apache.thrift.meta_data.FieldMetaData("upper_bounds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.KEY_METADATA, new org.apache.thrift.meta_data.FieldMetaData("key_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SPLIT_OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("split_offsets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SORT_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("sort_order_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileMetadata.class, metaDataMap);
  }

  public FileMetadata() {
  }

  public FileMetadata(
    FormatType file_format)
  {
    this();
    this.file_format = file_format;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileMetadata(FileMetadata other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    this.record_count = other.record_count;
    this.file_size_in_bytes = other.file_size_in_bytes;
    if (other.isSetColumn_sizes()) {
      java.util.Map<Integer, Long> __this__column_sizes = new java.util.HashMap<Integer, Long>(other.column_sizes);
      this.column_sizes = __this__column_sizes;
    }
    if (other.isSetValue_counts()) {
      java.util.Map<Integer, Long> __this__value_counts = new java.util.HashMap<Integer, Long>(other.value_counts);
      this.value_counts = __this__value_counts;
    }
    if (other.isSetNull_value_counts()) {
      java.util.Map<Integer, Long> __this__null_value_counts = new java.util.HashMap<Integer, Long>(other.null_value_counts);
      this.null_value_counts = __this__null_value_counts;
    }
    if (other.isSetNan_value_counts()) {
      java.util.Map<Integer, Long> __this__nan_value_counts = new java.util.HashMap<Integer, Long>(other.nan_value_counts);
      this.nan_value_counts = __this__nan_value_counts;
    }
    if (other.isSetLower_bounds()) {
      java.util.Map<Integer,java.nio.ByteBuffer> __this__lower_bounds = new java.util.HashMap<Integer,java.nio.ByteBuffer>(other.lower_bounds);
      this.lower_bounds = __this__lower_bounds;
    }
    if (other.isSetUpper_bounds()) {
      java.util.Map<Integer,java.nio.ByteBuffer> __this__upper_bounds = new java.util.HashMap<Integer,java.nio.ByteBuffer>(other.upper_bounds);
      this.upper_bounds = __this__upper_bounds;
    }
    if (other.isSetKey_metadata()) {
      this.key_metadata = org.apache.thrift.TBaseHelper.copyBinary(other.key_metadata);
    }
    if (other.isSetSplit_offsets()) {
      java.util.List<Long> __this__split_offsets = new java.util.ArrayList<Long>(other.split_offsets);
      this.split_offsets = __this__split_offsets;
    }
    this.sort_order_id = other.sort_order_id;
  }

  public FileMetadata deepCopy() {
    return new FileMetadata(this);
  }

  @Override
  public void clear() {
    this.file_format = null;
    setRecord_countIsSet(false);
    this.record_count = 0;
    setFile_size_in_bytesIsSet(false);
    this.file_size_in_bytes = 0;
    this.column_sizes = null;
    this.value_counts = null;
    this.null_value_counts = null;
    this.nan_value_counts = null;
    this.lower_bounds = null;
    this.upper_bounds = null;
    this.key_metadata = null;
    this.split_offsets = null;
    setSort_order_idIsSet(false);
    this.sort_order_id = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public FormatType getFile_format() {
    return this.file_format;
  }

  public FileMetadata setFile_format(@org.apache.thrift.annotation.Nullable FormatType file_format) {
    this.file_format = file_format;
    return this;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  public long getRecord_count() {
    return this.record_count;
  }

  public FileMetadata setRecord_count(long record_count) {
    this.record_count = record_count;
    setRecord_countIsSet(true);
    return this;
  }

  public void unsetRecord_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID);
  }

  /** Returns true if field record_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID);
  }

  public void setRecord_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID, value);
  }

  public long getFile_size_in_bytes() {
    return this.file_size_in_bytes;
  }

  public FileMetadata setFile_size_in_bytes(long file_size_in_bytes) {
    this.file_size_in_bytes = file_size_in_bytes;
    setFile_size_in_bytesIsSet(true);
    return this;
  }

  public void unsetFile_size_in_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID);
  }

  /** Returns true if field file_size_in_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_size_in_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID);
  }

  public void setFile_size_in_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID, value);
  }

  public int getColumn_sizesSize() {
    return (this.column_sizes == null) ? 0 : this.column_sizes.size();
  }

  public void putToColumn_sizes(int key, long val) {
    if (this.column_sizes == null) {
      this.column_sizes = new java.util.HashMap<Integer, Long>();
    }
    this.column_sizes.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<Integer, Long> getColumn_sizes() {
    return this.column_sizes;
  }

  public FileMetadata setColumn_sizes(@org.apache.thrift.annotation.Nullable java.util.Map<Integer, Long> column_sizes) {
    this.column_sizes = column_sizes;
    return this;
  }

  public void unsetColumn_sizes() {
    this.column_sizes = null;
  }

  /** Returns true if field column_sizes is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_sizes() {
    return this.column_sizes != null;
  }

  public void setColumn_sizesIsSet(boolean value) {
    if (!value) {
      this.column_sizes = null;
    }
  }

  public int getValue_countsSize() {
    return (this.value_counts == null) ? 0 : this.value_counts.size();
  }

  public void putToValue_counts(int key, long val) {
    if (this.value_counts == null) {
      this.value_counts = new java.util.HashMap<Integer, Long>();
    }
    this.value_counts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<Integer, Long> getValue_counts() {
    return this.value_counts;
  }

  public FileMetadata setValue_counts(@org.apache.thrift.annotation.Nullable java.util.Map<Integer, Long> value_counts) {
    this.value_counts = value_counts;
    return this;
  }

  public void unsetValue_counts() {
    this.value_counts = null;
  }

  /** Returns true if field value_counts is set (has been assigned a value) and false otherwise */
  public boolean isSetValue_counts() {
    return this.value_counts != null;
  }

  public void setValue_countsIsSet(boolean value) {
    if (!value) {
      this.value_counts = null;
    }
  }

  public int getNull_value_countsSize() {
    return (this.null_value_counts == null) ? 0 : this.null_value_counts.size();
  }

  public void putToNull_value_counts(int key, long val) {
    if (this.null_value_counts == null) {
      this.null_value_counts = new java.util.HashMap<Integer, Long>();
    }
    this.null_value_counts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<Integer, Long> getNull_value_counts() {
    return this.null_value_counts;
  }

  public FileMetadata setNull_value_counts(@org.apache.thrift.annotation.Nullable java.util.Map<Integer, Long> null_value_counts) {
    this.null_value_counts = null_value_counts;
    return this;
  }

  public void unsetNull_value_counts() {
    this.null_value_counts = null;
  }

  /** Returns true if field null_value_counts is set (has been assigned a value) and false otherwise */
  public boolean isSetNull_value_counts() {
    return this.null_value_counts != null;
  }

  public void setNull_value_countsIsSet(boolean value) {
    if (!value) {
      this.null_value_counts = null;
    }
  }

  public int getNan_value_countsSize() {
    return (this.nan_value_counts == null) ? 0 : this.nan_value_counts.size();
  }

  public void putToNan_value_counts(int key, long val) {
    if (this.nan_value_counts == null) {
      this.nan_value_counts = new java.util.HashMap<Integer, Long>();
    }
    this.nan_value_counts.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<Integer, Long> getNan_value_counts() {
    return this.nan_value_counts;
  }

  public FileMetadata setNan_value_counts(@org.apache.thrift.annotation.Nullable java.util.Map<Integer, Long> nan_value_counts) {
    this.nan_value_counts = nan_value_counts;
    return this;
  }

  public void unsetNan_value_counts() {
    this.nan_value_counts = null;
  }

  /** Returns true if field nan_value_counts is set (has been assigned a value) and false otherwise */
  public boolean isSetNan_value_counts() {
    return this.nan_value_counts != null;
  }

  public void setNan_value_countsIsSet(boolean value) {
    if (!value) {
      this.nan_value_counts = null;
    }
  }

  public int getLower_boundsSize() {
    return (this.lower_bounds == null) ? 0 : this.lower_bounds.size();
  }

  public void putToLower_bounds(int key, java.nio.ByteBuffer val) {
    if (this.lower_bounds == null) {
      this.lower_bounds = new java.util.HashMap<Integer,java.nio.ByteBuffer>();
    }
    this.lower_bounds.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<Integer,java.nio.ByteBuffer> getLower_bounds() {
    return this.lower_bounds;
  }

  public FileMetadata setLower_bounds(@org.apache.thrift.annotation.Nullable java.util.Map<Integer,java.nio.ByteBuffer> lower_bounds) {
    this.lower_bounds = lower_bounds;
    return this;
  }

  public void unsetLower_bounds() {
    this.lower_bounds = null;
  }

  /** Returns true if field lower_bounds is set (has been assigned a value) and false otherwise */
  public boolean isSetLower_bounds() {
    return this.lower_bounds != null;
  }

  public void setLower_boundsIsSet(boolean value) {
    if (!value) {
      this.lower_bounds = null;
    }
  }

  public int getUpper_boundsSize() {
    return (this.upper_bounds == null) ? 0 : this.upper_bounds.size();
  }

  public void putToUpper_bounds(int key, java.nio.ByteBuffer val) {
    if (this.upper_bounds == null) {
      this.upper_bounds = new java.util.HashMap<Integer,java.nio.ByteBuffer>();
    }
    this.upper_bounds.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<Integer,java.nio.ByteBuffer> getUpper_bounds() {
    return this.upper_bounds;
  }

  public FileMetadata setUpper_bounds(@org.apache.thrift.annotation.Nullable java.util.Map<Integer,java.nio.ByteBuffer> upper_bounds) {
    this.upper_bounds = upper_bounds;
    return this;
  }

  public void unsetUpper_bounds() {
    this.upper_bounds = null;
  }

  /** Returns true if field upper_bounds is set (has been assigned a value) and false otherwise */
  public boolean isSetUpper_bounds() {
    return this.upper_bounds != null;
  }

  public void setUpper_boundsIsSet(boolean value) {
    if (!value) {
      this.upper_bounds = null;
    }
  }

  public byte[] getKey_metadata() {
    setKey_metadata(org.apache.thrift.TBaseHelper.rightSize(key_metadata));
    return key_metadata == null ? null : key_metadata.array();
  }

  public java.nio.ByteBuffer bufferForKey_metadata() {
    return org.apache.thrift.TBaseHelper.copyBinary(key_metadata);
  }

  public FileMetadata setKey_metadata(byte[] key_metadata) {
    this.key_metadata = key_metadata == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(key_metadata.clone());
    return this;
  }

  public FileMetadata setKey_metadata(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer key_metadata) {
    this.key_metadata = org.apache.thrift.TBaseHelper.copyBinary(key_metadata);
    return this;
  }

  public void unsetKey_metadata() {
    this.key_metadata = null;
  }

  /** Returns true if field key_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_metadata() {
    return this.key_metadata != null;
  }

  public void setKey_metadataIsSet(boolean value) {
    if (!value) {
      this.key_metadata = null;
    }
  }

  public int getSplit_offsetsSize() {
    return (this.split_offsets == null) ? 0 : this.split_offsets.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Long> getSplit_offsetsIterator() {
    return (this.split_offsets == null) ? null : this.split_offsets.iterator();
  }

  public void addToSplit_offsets(long elem) {
    if (this.split_offsets == null) {
      this.split_offsets = new java.util.ArrayList<Long>();
    }
    this.split_offsets.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Long> getSplit_offsets() {
    return this.split_offsets;
  }

  public FileMetadata setSplit_offsets(@org.apache.thrift.annotation.Nullable java.util.List<Long> split_offsets) {
    this.split_offsets = split_offsets;
    return this;
  }

  public void unsetSplit_offsets() {
    this.split_offsets = null;
  }

  /** Returns true if field split_offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetSplit_offsets() {
    return this.split_offsets != null;
  }

  public void setSplit_offsetsIsSet(boolean value) {
    if (!value) {
      this.split_offsets = null;
    }
  }

  public int getSort_order_id() {
    return this.sort_order_id;
  }

  public FileMetadata setSort_order_id(int sort_order_id) {
    this.sort_order_id = sort_order_id;
    setSort_order_idIsSet(true);
    return this;
  }

  public void unsetSort_order_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORT_ORDER_ID_ISSET_ID);
  }

  /** Returns true if field sort_order_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_order_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORT_ORDER_ID_ISSET_ID);
  }

  public void setSort_order_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORT_ORDER_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((FormatType)value);
      }
      break;

    case RECORD_COUNT:
      if (value == null) {
        unsetRecord_count();
      } else {
        setRecord_count((Long)value);
      }
      break;

    case FILE_SIZE_IN_BYTES:
      if (value == null) {
        unsetFile_size_in_bytes();
      } else {
        setFile_size_in_bytes((Long)value);
      }
      break;

    case COLUMN_SIZES:
      if (value == null) {
        unsetColumn_sizes();
      } else {
        setColumn_sizes((java.util.Map<Integer, Long>)value);
      }
      break;

    case VALUE_COUNTS:
      if (value == null) {
        unsetValue_counts();
      } else {
        setValue_counts((java.util.Map<Integer, Long>)value);
      }
      break;

    case NULL_VALUE_COUNTS:
      if (value == null) {
        unsetNull_value_counts();
      } else {
        setNull_value_counts((java.util.Map<Integer, Long>)value);
      }
      break;

    case NAN_VALUE_COUNTS:
      if (value == null) {
        unsetNan_value_counts();
      } else {
        setNan_value_counts((java.util.Map<Integer, Long>)value);
      }
      break;

    case LOWER_BOUNDS:
      if (value == null) {
        unsetLower_bounds();
      } else {
        setLower_bounds((java.util.Map<Integer,java.nio.ByteBuffer>)value);
      }
      break;

    case UPPER_BOUNDS:
      if (value == null) {
        unsetUpper_bounds();
      } else {
        setUpper_bounds((java.util.Map<Integer,java.nio.ByteBuffer>)value);
      }
      break;

    case KEY_METADATA:
      if (value == null) {
        unsetKey_metadata();
      } else {
        if (value instanceof byte[]) {
          setKey_metadata((byte[])value);
        } else {
          setKey_metadata((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SPLIT_OFFSETS:
      if (value == null) {
        unsetSplit_offsets();
      } else {
        setSplit_offsets((java.util.List<Long>)value);
      }
      break;

    case SORT_ORDER_ID:
      if (value == null) {
        unsetSort_order_id();
      } else {
        setSort_order_id((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_FORMAT:
      return getFile_format();

    case RECORD_COUNT:
      return getRecord_count();

    case FILE_SIZE_IN_BYTES:
      return getFile_size_in_bytes();

    case COLUMN_SIZES:
      return getColumn_sizes();

    case VALUE_COUNTS:
      return getValue_counts();

    case NULL_VALUE_COUNTS:
      return getNull_value_counts();

    case NAN_VALUE_COUNTS:
      return getNan_value_counts();

    case LOWER_BOUNDS:
      return getLower_bounds();

    case UPPER_BOUNDS:
      return getUpper_bounds();

    case KEY_METADATA:
      return getKey_metadata();

    case SPLIT_OFFSETS:
      return getSplit_offsets();

    case SORT_ORDER_ID:
      return getSort_order_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_FORMAT:
      return isSetFile_format();
    case RECORD_COUNT:
      return isSetRecord_count();
    case FILE_SIZE_IN_BYTES:
      return isSetFile_size_in_bytes();
    case COLUMN_SIZES:
      return isSetColumn_sizes();
    case VALUE_COUNTS:
      return isSetValue_counts();
    case NULL_VALUE_COUNTS:
      return isSetNull_value_counts();
    case NAN_VALUE_COUNTS:
      return isSetNan_value_counts();
    case LOWER_BOUNDS:
      return isSetLower_bounds();
    case UPPER_BOUNDS:
      return isSetUpper_bounds();
    case KEY_METADATA:
      return isSetKey_metadata();
    case SPLIT_OFFSETS:
      return isSetSplit_offsets();
    case SORT_ORDER_ID:
      return isSetSort_order_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileMetadata)
      return this.equals((FileMetadata)that);
    return false;
  }

  public boolean equals(FileMetadata that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_record_count = true && this.isSetRecord_count();
    boolean that_present_record_count = true && that.isSetRecord_count();
    if (this_present_record_count || that_present_record_count) {
      if (!(this_present_record_count && that_present_record_count))
        return false;
      if (this.record_count != that.record_count)
        return false;
    }

    boolean this_present_file_size_in_bytes = true && this.isSetFile_size_in_bytes();
    boolean that_present_file_size_in_bytes = true && that.isSetFile_size_in_bytes();
    if (this_present_file_size_in_bytes || that_present_file_size_in_bytes) {
      if (!(this_present_file_size_in_bytes && that_present_file_size_in_bytes))
        return false;
      if (this.file_size_in_bytes != that.file_size_in_bytes)
        return false;
    }

    boolean this_present_column_sizes = true && this.isSetColumn_sizes();
    boolean that_present_column_sizes = true && that.isSetColumn_sizes();
    if (this_present_column_sizes || that_present_column_sizes) {
      if (!(this_present_column_sizes && that_present_column_sizes))
        return false;
      if (!this.column_sizes.equals(that.column_sizes))
        return false;
    }

    boolean this_present_value_counts = true && this.isSetValue_counts();
    boolean that_present_value_counts = true && that.isSetValue_counts();
    if (this_present_value_counts || that_present_value_counts) {
      if (!(this_present_value_counts && that_present_value_counts))
        return false;
      if (!this.value_counts.equals(that.value_counts))
        return false;
    }

    boolean this_present_null_value_counts = true && this.isSetNull_value_counts();
    boolean that_present_null_value_counts = true && that.isSetNull_value_counts();
    if (this_present_null_value_counts || that_present_null_value_counts) {
      if (!(this_present_null_value_counts && that_present_null_value_counts))
        return false;
      if (!this.null_value_counts.equals(that.null_value_counts))
        return false;
    }

    boolean this_present_nan_value_counts = true && this.isSetNan_value_counts();
    boolean that_present_nan_value_counts = true && that.isSetNan_value_counts();
    if (this_present_nan_value_counts || that_present_nan_value_counts) {
      if (!(this_present_nan_value_counts && that_present_nan_value_counts))
        return false;
      if (!this.nan_value_counts.equals(that.nan_value_counts))
        return false;
    }

    boolean this_present_lower_bounds = true && this.isSetLower_bounds();
    boolean that_present_lower_bounds = true && that.isSetLower_bounds();
    if (this_present_lower_bounds || that_present_lower_bounds) {
      if (!(this_present_lower_bounds && that_present_lower_bounds))
        return false;
      if (!this.lower_bounds.equals(that.lower_bounds))
        return false;
    }

    boolean this_present_upper_bounds = true && this.isSetUpper_bounds();
    boolean that_present_upper_bounds = true && that.isSetUpper_bounds();
    if (this_present_upper_bounds || that_present_upper_bounds) {
      if (!(this_present_upper_bounds && that_present_upper_bounds))
        return false;
      if (!this.upper_bounds.equals(that.upper_bounds))
        return false;
    }

    boolean this_present_key_metadata = true && this.isSetKey_metadata();
    boolean that_present_key_metadata = true && that.isSetKey_metadata();
    if (this_present_key_metadata || that_present_key_metadata) {
      if (!(this_present_key_metadata && that_present_key_metadata))
        return false;
      if (!this.key_metadata.equals(that.key_metadata))
        return false;
    }

    boolean this_present_split_offsets = true && this.isSetSplit_offsets();
    boolean that_present_split_offsets = true && that.isSetSplit_offsets();
    if (this_present_split_offsets || that_present_split_offsets) {
      if (!(this_present_split_offsets && that_present_split_offsets))
        return false;
      if (!this.split_offsets.equals(that.split_offsets))
        return false;
    }

    boolean this_present_sort_order_id = true && this.isSetSort_order_id();
    boolean that_present_sort_order_id = true && that.isSetSort_order_id();
    if (this_present_sort_order_id || that_present_sort_order_id) {
      if (!(this_present_sort_order_id && that_present_sort_order_id))
        return false;
      if (this.sort_order_id != that.sort_order_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFile_format()) ? 131071 : 524287);
    if (isSetFile_format())
      hashCode = hashCode * 8191 + file_format.getValue();

    hashCode = hashCode * 8191 + ((isSetRecord_count()) ? 131071 : 524287);
    if (isSetRecord_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(record_count);

    hashCode = hashCode * 8191 + ((isSetFile_size_in_bytes()) ? 131071 : 524287);
    if (isSetFile_size_in_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_size_in_bytes);

    hashCode = hashCode * 8191 + ((isSetColumn_sizes()) ? 131071 : 524287);
    if (isSetColumn_sizes())
      hashCode = hashCode * 8191 + column_sizes.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue_counts()) ? 131071 : 524287);
    if (isSetValue_counts())
      hashCode = hashCode * 8191 + value_counts.hashCode();

    hashCode = hashCode * 8191 + ((isSetNull_value_counts()) ? 131071 : 524287);
    if (isSetNull_value_counts())
      hashCode = hashCode * 8191 + null_value_counts.hashCode();

    hashCode = hashCode * 8191 + ((isSetNan_value_counts()) ? 131071 : 524287);
    if (isSetNan_value_counts())
      hashCode = hashCode * 8191 + nan_value_counts.hashCode();

    hashCode = hashCode * 8191 + ((isSetLower_bounds()) ? 131071 : 524287);
    if (isSetLower_bounds())
      hashCode = hashCode * 8191 + lower_bounds.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpper_bounds()) ? 131071 : 524287);
    if (isSetUpper_bounds())
      hashCode = hashCode * 8191 + upper_bounds.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_metadata()) ? 131071 : 524287);
    if (isSetKey_metadata())
      hashCode = hashCode * 8191 + key_metadata.hashCode();

    hashCode = hashCode * 8191 + ((isSetSplit_offsets()) ? 131071 : 524287);
    if (isSetSplit_offsets())
      hashCode = hashCode * 8191 + split_offsets.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_order_id()) ? 131071 : 524287);
    if (isSetSort_order_id())
      hashCode = hashCode * 8191 + sort_order_id;

    return hashCode;
  }

  @Override
  public int compareTo(FileMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFile_format()).compareTo(other.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, other.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord_count()).compareTo(other.isSetRecord_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record_count, other.record_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_size_in_bytes()).compareTo(other.isSetFile_size_in_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_size_in_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_size_in_bytes, other.file_size_in_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_sizes()).compareTo(other.isSetColumn_sizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_sizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_sizes, other.column_sizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue_counts()).compareTo(other.isSetValue_counts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue_counts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value_counts, other.value_counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNull_value_counts()).compareTo(other.isSetNull_value_counts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNull_value_counts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_value_counts, other.null_value_counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNan_value_counts()).compareTo(other.isSetNan_value_counts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNan_value_counts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nan_value_counts, other.nan_value_counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLower_bounds()).compareTo(other.isSetLower_bounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLower_bounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lower_bounds, other.lower_bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpper_bounds()).compareTo(other.isSetUpper_bounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpper_bounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upper_bounds, other.upper_bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey_metadata()).compareTo(other.isSetKey_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_metadata, other.key_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplit_offsets()).compareTo(other.isSetSplit_offsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplit_offsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split_offsets, other.split_offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_order_id()).compareTo(other.isSetSort_order_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_order_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_order_id, other.sort_order_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileMetadata(");
    boolean first = true;

    sb.append("file_format:");
    if (this.file_format == null) {
      sb.append("null");
    } else {
      sb.append(this.file_format);
    }
    first = false;
    if (isSetRecord_count()) {
      if (!first) sb.append(", ");
      sb.append("record_count:");
      sb.append(this.record_count);
      first = false;
    }
    if (isSetFile_size_in_bytes()) {
      if (!first) sb.append(", ");
      sb.append("file_size_in_bytes:");
      sb.append(this.file_size_in_bytes);
      first = false;
    }
    if (isSetColumn_sizes()) {
      if (!first) sb.append(", ");
      sb.append("column_sizes:");
      if (this.column_sizes == null) {
        sb.append("null");
      } else {
        sb.append(this.column_sizes);
      }
      first = false;
    }
    if (isSetValue_counts()) {
      if (!first) sb.append(", ");
      sb.append("value_counts:");
      if (this.value_counts == null) {
        sb.append("null");
      } else {
        sb.append(this.value_counts);
      }
      first = false;
    }
    if (isSetNull_value_counts()) {
      if (!first) sb.append(", ");
      sb.append("null_value_counts:");
      if (this.null_value_counts == null) {
        sb.append("null");
      } else {
        sb.append(this.null_value_counts);
      }
      first = false;
    }
    if (isSetNan_value_counts()) {
      if (!first) sb.append(", ");
      sb.append("nan_value_counts:");
      if (this.nan_value_counts == null) {
        sb.append("null");
      } else {
        sb.append(this.nan_value_counts);
      }
      first = false;
    }
    if (isSetLower_bounds()) {
      if (!first) sb.append(", ");
      sb.append("lower_bounds:");
      if (this.lower_bounds == null) {
        sb.append("null");
      } else {
        sb.append(this.lower_bounds);
      }
      first = false;
    }
    if (isSetUpper_bounds()) {
      if (!first) sb.append(", ");
      sb.append("upper_bounds:");
      if (this.upper_bounds == null) {
        sb.append("null");
      } else {
        sb.append(this.upper_bounds);
      }
      first = false;
    }
    if (isSetKey_metadata()) {
      if (!first) sb.append(", ");
      sb.append("key_metadata:");
      if (this.key_metadata == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key_metadata, sb);
      }
      first = false;
    }
    if (isSetSplit_offsets()) {
      if (!first) sb.append(", ");
      sb.append("split_offsets:");
      if (this.split_offsets == null) {
        sb.append("null");
      } else {
        sb.append(this.split_offsets);
      }
      first = false;
    }
    if (isSetSort_order_id()) {
      if (!first) sb.append(", ");
      sb.append("sort_order_id:");
      sb.append(this.sort_order_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (file_format == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_format' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileMetadataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileMetadataStandardScheme getScheme() {
      return new FileMetadataStandardScheme();
    }
  }

  private static class FileMetadataStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileMetadata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_format = FormatType.findByValue(iprot.readI32());
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECORD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.record_count = iprot.readI64();
              struct.setRecord_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_SIZE_IN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_size_in_bytes = iprot.readI64();
              struct.setFile_size_in_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_SIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.column_sizes = new java.util.HashMap<Integer, Long>(2*_map0.size);
                int _key1;
                long _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readI64();
                  struct.column_sizes.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setColumn_sizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.value_counts = new java.util.HashMap<Integer, Long>(2*_map4.size);
                int _key5;
                long _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readI32();
                  _val6 = iprot.readI64();
                  struct.value_counts.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setValue_countsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NULL_VALUE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.null_value_counts = new java.util.HashMap<Integer, Long>(2*_map8.size);
                int _key9;
                long _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readI32();
                  _val10 = iprot.readI64();
                  struct.null_value_counts.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setNull_value_countsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAN_VALUE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.nan_value_counts = new java.util.HashMap<Integer, Long>(2*_map12.size);
                int _key13;
                long _val14;
                for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                {
                  _key13 = iprot.readI32();
                  _val14 = iprot.readI64();
                  struct.nan_value_counts.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setNan_value_countsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOWER_BOUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.lower_bounds = new java.util.HashMap<Integer,java.nio.ByteBuffer>(2*_map16.size);
                int _key17;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readI32();
                  _val18 = iprot.readBinary();
                  struct.lower_bounds.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setLower_boundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPPER_BOUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                struct.upper_bounds = new java.util.HashMap<Integer,java.nio.ByteBuffer>(2*_map20.size);
                int _key21;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val22;
                for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                {
                  _key21 = iprot.readI32();
                  _val22 = iprot.readBinary();
                  struct.upper_bounds.put(_key21, _val22);
                }
                iprot.readMapEnd();
              }
              struct.setUpper_boundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KEY_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key_metadata = iprot.readBinary();
              struct.setKey_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SPLIT_OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.split_offsets = new java.util.ArrayList<Long>(_list24.size);
                long _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI64();
                  struct.split_offsets.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setSplit_offsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SORT_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sort_order_id = iprot.readI32();
              struct.setSort_order_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_format != null) {
        oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
        oprot.writeI32(struct.file_format.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecord_count()) {
        oprot.writeFieldBegin(RECORD_COUNT_FIELD_DESC);
        oprot.writeI64(struct.record_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFile_size_in_bytes()) {
        oprot.writeFieldBegin(FILE_SIZE_IN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.file_size_in_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.column_sizes != null) {
        if (struct.isSetColumn_sizes()) {
          oprot.writeFieldBegin(COLUMN_SIZES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.column_sizes.size()));
            for (java.util.Map.Entry<Integer, Long> _iter27 : struct.column_sizes.entrySet())
            {
              oprot.writeI32(_iter27.getKey());
              oprot.writeI64(_iter27.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.value_counts != null) {
        if (struct.isSetValue_counts()) {
          oprot.writeFieldBegin(VALUE_COUNTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.value_counts.size()));
            for (java.util.Map.Entry<Integer, Long> _iter28 : struct.value_counts.entrySet())
            {
              oprot.writeI32(_iter28.getKey());
              oprot.writeI64(_iter28.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.null_value_counts != null) {
        if (struct.isSetNull_value_counts()) {
          oprot.writeFieldBegin(NULL_VALUE_COUNTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.null_value_counts.size()));
            for (java.util.Map.Entry<Integer, Long> _iter29 : struct.null_value_counts.entrySet())
            {
              oprot.writeI32(_iter29.getKey());
              oprot.writeI64(_iter29.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nan_value_counts != null) {
        if (struct.isSetNan_value_counts()) {
          oprot.writeFieldBegin(NAN_VALUE_COUNTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.nan_value_counts.size()));
            for (java.util.Map.Entry<Integer, Long> _iter30 : struct.nan_value_counts.entrySet())
            {
              oprot.writeI32(_iter30.getKey());
              oprot.writeI64(_iter30.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lower_bounds != null) {
        if (struct.isSetLower_bounds()) {
          oprot.writeFieldBegin(LOWER_BOUNDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.lower_bounds.size()));
            for (java.util.Map.Entry<Integer, java.nio.ByteBuffer> _iter31 : struct.lower_bounds.entrySet())
            {
              oprot.writeI32(_iter31.getKey());
              oprot.writeBinary(_iter31.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.upper_bounds != null) {
        if (struct.isSetUpper_bounds()) {
          oprot.writeFieldBegin(UPPER_BOUNDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.upper_bounds.size()));
            for (java.util.Map.Entry<Integer, java.nio.ByteBuffer> _iter32 : struct.upper_bounds.entrySet())
            {
              oprot.writeI32(_iter32.getKey());
              oprot.writeBinary(_iter32.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.key_metadata != null) {
        if (struct.isSetKey_metadata()) {
          oprot.writeFieldBegin(KEY_METADATA_FIELD_DESC);
          oprot.writeBinary(struct.key_metadata);
          oprot.writeFieldEnd();
        }
      }
      if (struct.split_offsets != null) {
        if (struct.isSetSplit_offsets()) {
          oprot.writeFieldBegin(SPLIT_OFFSETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.split_offsets.size()));
            for (long _iter33 : struct.split_offsets)
            {
              oprot.writeI64(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSort_order_id()) {
        oprot.writeFieldBegin(SORT_ORDER_ID_FIELD_DESC);
        oprot.writeI32(struct.sort_order_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileMetadataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileMetadataTupleScheme getScheme() {
      return new FileMetadataTupleScheme();
    }
  }

  private static class FileMetadataTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.file_format.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRecord_count()) {
        optionals.set(0);
      }
      if (struct.isSetFile_size_in_bytes()) {
        optionals.set(1);
      }
      if (struct.isSetColumn_sizes()) {
        optionals.set(2);
      }
      if (struct.isSetValue_counts()) {
        optionals.set(3);
      }
      if (struct.isSetNull_value_counts()) {
        optionals.set(4);
      }
      if (struct.isSetNan_value_counts()) {
        optionals.set(5);
      }
      if (struct.isSetLower_bounds()) {
        optionals.set(6);
      }
      if (struct.isSetUpper_bounds()) {
        optionals.set(7);
      }
      if (struct.isSetKey_metadata()) {
        optionals.set(8);
      }
      if (struct.isSetSplit_offsets()) {
        optionals.set(9);
      }
      if (struct.isSetSort_order_id()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetRecord_count()) {
        oprot.writeI64(struct.record_count);
      }
      if (struct.isSetFile_size_in_bytes()) {
        oprot.writeI64(struct.file_size_in_bytes);
      }
      if (struct.isSetColumn_sizes()) {
        {
          oprot.writeI32(struct.column_sizes.size());
          for (java.util.Map.Entry<Integer, Long> _iter34 : struct.column_sizes.entrySet())
          {
            oprot.writeI32(_iter34.getKey());
            oprot.writeI64(_iter34.getValue());
          }
        }
      }
      if (struct.isSetValue_counts()) {
        {
          oprot.writeI32(struct.value_counts.size());
          for (java.util.Map.Entry<Integer, Long> _iter35 : struct.value_counts.entrySet())
          {
            oprot.writeI32(_iter35.getKey());
            oprot.writeI64(_iter35.getValue());
          }
        }
      }
      if (struct.isSetNull_value_counts()) {
        {
          oprot.writeI32(struct.null_value_counts.size());
          for (java.util.Map.Entry<Integer, Long> _iter36 : struct.null_value_counts.entrySet())
          {
            oprot.writeI32(_iter36.getKey());
            oprot.writeI64(_iter36.getValue());
          }
        }
      }
      if (struct.isSetNan_value_counts()) {
        {
          oprot.writeI32(struct.nan_value_counts.size());
          for (java.util.Map.Entry<Integer, Long> _iter37 : struct.nan_value_counts.entrySet())
          {
            oprot.writeI32(_iter37.getKey());
            oprot.writeI64(_iter37.getValue());
          }
        }
      }
      if (struct.isSetLower_bounds()) {
        {
          oprot.writeI32(struct.lower_bounds.size());
          for (java.util.Map.Entry<Integer, java.nio.ByteBuffer> _iter38 : struct.lower_bounds.entrySet())
          {
            oprot.writeI32(_iter38.getKey());
            oprot.writeBinary(_iter38.getValue());
          }
        }
      }
      if (struct.isSetUpper_bounds()) {
        {
          oprot.writeI32(struct.upper_bounds.size());
          for (java.util.Map.Entry<Integer, java.nio.ByteBuffer> _iter39 : struct.upper_bounds.entrySet())
          {
            oprot.writeI32(_iter39.getKey());
            oprot.writeBinary(_iter39.getValue());
          }
        }
      }
      if (struct.isSetKey_metadata()) {
        oprot.writeBinary(struct.key_metadata);
      }
      if (struct.isSetSplit_offsets()) {
        {
          oprot.writeI32(struct.split_offsets.size());
          for (long _iter40 : struct.split_offsets)
          {
            oprot.writeI64(_iter40);
          }
        }
      }
      if (struct.isSetSort_order_id()) {
        oprot.writeI32(struct.sort_order_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.file_format = FormatType.findByValue(iprot.readI32());
      struct.setFile_formatIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.record_count = iprot.readI64();
        struct.setRecord_countIsSet(true);
      }
      if (incoming.get(1)) {
        struct.file_size_in_bytes = iprot.readI64();
        struct.setFile_size_in_bytesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map41 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.column_sizes = new java.util.HashMap<Integer, Long>(2*_map41.size);
          int _key42;
          long _val43;
          for (int _i44 = 0; _i44 < _map41.size; ++_i44)
          {
            _key42 = iprot.readI32();
            _val43 = iprot.readI64();
            struct.column_sizes.put(_key42, _val43);
          }
        }
        struct.setColumn_sizesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map45 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.value_counts = new java.util.HashMap<Integer, Long>(2*_map45.size);
          int _key46;
          long _val47;
          for (int _i48 = 0; _i48 < _map45.size; ++_i48)
          {
            _key46 = iprot.readI32();
            _val47 = iprot.readI64();
            struct.value_counts.put(_key46, _val47);
          }
        }
        struct.setValue_countsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map49 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.null_value_counts = new java.util.HashMap<Integer, Long>(2*_map49.size);
          int _key50;
          long _val51;
          for (int _i52 = 0; _i52 < _map49.size; ++_i52)
          {
            _key50 = iprot.readI32();
            _val51 = iprot.readI64();
            struct.null_value_counts.put(_key50, _val51);
          }
        }
        struct.setNull_value_countsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map53 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.nan_value_counts = new java.util.HashMap<Integer, Long>(2*_map53.size);
          int _key54;
          long _val55;
          for (int _i56 = 0; _i56 < _map53.size; ++_i56)
          {
            _key54 = iprot.readI32();
            _val55 = iprot.readI64();
            struct.nan_value_counts.put(_key54, _val55);
          }
        }
        struct.setNan_value_countsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map57 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.lower_bounds = new java.util.HashMap<Integer,java.nio.ByteBuffer>(2*_map57.size);
          int _key58;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val59;
          for (int _i60 = 0; _i60 < _map57.size; ++_i60)
          {
            _key58 = iprot.readI32();
            _val59 = iprot.readBinary();
            struct.lower_bounds.put(_key58, _val59);
          }
        }
        struct.setLower_boundsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map61 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.upper_bounds = new java.util.HashMap<Integer,java.nio.ByteBuffer>(2*_map61.size);
          int _key62;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val63;
          for (int _i64 = 0; _i64 < _map61.size; ++_i64)
          {
            _key62 = iprot.readI32();
            _val63 = iprot.readBinary();
            struct.upper_bounds.put(_key62, _val63);
          }
        }
        struct.setUpper_boundsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.key_metadata = iprot.readBinary();
        struct.setKey_metadataIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.split_offsets = new java.util.ArrayList<Long>(_list65.size);
          long _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = iprot.readI64();
            struct.split_offsets.add(_elem66);
          }
        }
        struct.setSplit_offsetsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sort_order_id = iprot.readI32();
        struct.setSort_order_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

